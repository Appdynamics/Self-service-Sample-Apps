// Generated by CoffeeScript 1.9.1
(function() {
  var app;

  app = angular.module('storefront', ['ngRoute']);

  app.config([
    '$routeProvider', '$httpProvider', function($routeProvider, $httpProvider) {
      $routeProvider.when('/store', {
        templateUrl: '/partials/store.html',
        controller: 'StoreFrontController'
      }).when('/admin', {
        templateUrl: '/partials/admin.html',
        controller: 'AdminController'
      }).otherwise({
        redirectTo: '/store'
      });
      return $httpProvider.interceptors.push([
        '$q', '$rootScope', function($q, $rootScope) {
          if ($rootScope.loaders == null) {
            $rootScope.loaders = 0;
          }
          return {
            request: function(request) {
              $rootScope.loaders++;
              return request;
            },
            requestError: function(error) {
              $rootScope.loaders--;
              if ($rootScope.loaders < 0) {
                $rootScope.loaders = 0;
              }
              return error;
            },
            response: function(response) {
              $rootScope.loaders--;
              if ($rootScope.loaders < 0) {
                $rootScope.loaders = 0;
              }
              return response;
            },
            responseError: function(error) {
              $rootScope.loaders--;
              if ($rootScope.loaders < 0) {
                $rootScope.loaders = 0;
              }
              return error;
            }
          };
        }
      ]);
    }
  ]);

  app.controller('StoreFrontController', [
    '$scope', '$http', '$rootScope', function($scope, $http, $rootScope) {
      $scope.initialLoad = true;
      $http.get('/retrieveAll').success(function(data) {
        $scope.initialLoad = false;
        return $scope.products = data;
      }).error(function() {
        return alert('Unable to retrieve product information!');
      });
      $scope.consumeProduct = function(product, $event) {
        product.loading = true;
        return $http.get('/consume', {
          method: 'GET',
          params: {
            id: product.id
          }
        }).success(function(data) {
          product.stock = data[0].stock;
          return product.loading = false;
        }).error(function() {
          alert('Unable to purchase product!');
          return product.loading = false;
        });
      };
      if ($rootScope.exceptions == null) {
        $rootScope.exceptions = 0;
      }
      $scope.raising = false;
      $scope.getExceptions = function() {
        return $rootScope.exceptions;
      };
      return $scope.raiseException = function() {
        $scope.raising = true;
        return $http.get('/exception', {
          method: 'GET'
        }).success(function(data) {
          $rootScope.exceptions++;
          return $scope.raising = false;
        }).error(function() {
          return $scope.raising = false;
        });
      };
    }
  ]);

  app.controller('AdminController', [
    '$scope', '$http', function($scope, $http) {
      var setupProductUpdate;
      $scope.products = [];
      setupProductUpdate = function(product) {
        product.loading = false;
        product.stock = parseInt(product.stock, 10);
        product.save = function() {
          if (product.name === "" || !angular.isNumber(product.stock)) {
            return;
          }
          return $http.get('/update', {
            method: 'GET',
            params: {
              id: product.id,
              name: product.name,
              stock: product.stock
            }
          }).success(function() {
            return product.lodaing = false;
          }).error(function() {
            alert('Unable to update the product!');
            return product.loading = false;
          });
        };
        product["delete"] = function() {
          return $http.get('/delete', {
            method: 'GET',
            params: {
              id: product.id
            }
          }).success(function() {
            var lookup, results;
            product.loading = false;
            results = [];
            for (lookup in $scope.products) {
              if (!$scope.products.hasOwnProperty(lookup)) {
                continue;
              }
              if ($scope.products[lookup].id === product.id) {
                $scope.products.splice(lookup, 1);
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }).error(function() {
            alert('Unable to delete the product!');
            return product.loading = false;
          });
        };
        return $scope.products.push(product);
      };
      $http.get('/retrieveAll').success(function(data) {
        var product, results;
        results = [];
        for (product in data) {
          if (!data.hasOwnProperty(product)) {
            continue;
          }
          results.push(setupProductUpdate(data[product]));
        }
        return results;
      });
      $scope.newName = "";
      $scope.newStock = 0;
      $scope.loadingNew = false;
      return $scope.addNew = function() {
        if ($scope.newName === "" || !angular.isNumber($scope.newStock)) {
          return;
        }
        $scope.loadingNew = true;
        return $http.get('/add', {
          method: 'GET',
          params: {
            name: $scope.newName,
            stock: $scope.newStock
          }
        }).success(function(data) {
          $scope.loadingNew = false;
          $scope.newName = "";
          $scope.newStock = 0;
          return setupProductUpdate(data[0]);
        }).error(function() {
          alert('Unable to add new product!');
          return $scope.loadingNew = false;
        });
      };
    }
  ]);

  app.directive('adLoader', [
    '$rootScope', function($rootScope) {
      return {
        restrict: 'E',
        templateUrl: '/partials/loader.html',
        link: function() {
          if ($rootScope.loaders == null) {
            $rootScope.loaders = 0;
          }
          $rootScope.$on('$routeChangeStart', function() {
            return $rootScope.loaders++;
          });
          return $rootScope.$on('$routeChangeSuccess', function() {
            $rootScope.loaders--;
            if ($rootScope.loaders < 0) {
              return $rootScope.loaders = 0;
            }
          });
        }
      };
    }
  ]);

  app.directive('adProduct', function() {
    return {
      restrict: 'E',
      templateUrl: '/partials/product.html',
      scope: {
        product: '=',
        consumeProduct: '='
      }
    };
  });

}).call(this);
